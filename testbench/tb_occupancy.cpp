#include "Voccupancy.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"

char *module = (char *)"PCounter";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Voccupancy *tb = new Voccupancy;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/occupancy.vcd");

    // Reset sequence
    tb->clk = 0;
    tb->rst_n = 1;
    stick(tb, tfp);
    tb->rst_n = 0;
    stick(tb, tfp);
    tb->rst_n = 1;
    tick(tb, tfp);

    initial_print(module);

    int pass = 0;
    int fail = 0;
    int cycle = 0;

    // First, lock some registers
    for (int i = 1; i < 32; i += 2)
    {
        tb->source1 = 0;
        tb->source2 = 0;
        tb->target = i;
        tb->lock = 1;
        tick(tb, tfp);

        equality_print(cycle, tb->exec_ok, 1);
    }

    final_print(module);

    tfp->close();
    delete tb;
    return fail;
}
