#include "Vcsr.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"

char *module = (char*)"CSR";

unsigned short int addresses[] = {
    0x300, 0x304, 0x305,
    0x340, 0x341, 0x342,
    0x343, 0x344, 0xB00,
    0xB02, 0xB03, 0xB04,
    0xB05, 0xB80, 0xB82,
    0xB83, 0xB84, 0xB85,
    0xF10, 0xF11, 0xF12,
    0xF13, 0xF14 // Written addresses of CSR registers.
};

unsigned int readback[] = {
    0x00007188, 0xFFFF0888, 0xFFFFFF01,
    0xFFFFFFFF, 0xFFFFFFFE, 0x8000001F,
    0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000 // Values that shall be read
};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vcsr *tb = new Vcsr;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/csr.vcd");

    stick(tb, tfp);
    tb->wd = 0xFFFFFFFF;
    tick(tb, tfp);

    initial_print(module);

    int pass = 0;
    int fail = 0;

    // Count test
    for (uint64_t k = 0; k < 23; k++)
    {
        // Write some data (and calling tick to register them)
        tb->wa = addresses[k];
        tb->wd = 0xFFFFFFFF;
        tb->we = 1;
        tick(tb, tfp);
        tb->we = 0;
        tick(tb, tfp); // Writes are taking two cycles (or 1 CPU cycle).

        tb->ra = addresses[k];
        tick(tb, tfp);

        // Read some data (without calling tick but only eval to register them without clock)

        if ((tb->rd != readback[k]))
        {
            fail += 1;
            std::cout << KRED
                      << std::hex
                      << " [ FAIL ] : Value readen : "
                      << tb->rd
                      << " Value waited : "
                      << readback[k]
                      << " At address : "
                      << addresses[k]
                      << RST
                      << std::dec
                      << std::endl;
        }
        else
            pass += 1;

        // tick(tb, tfp);
    }

    final_print(pass, fail, module);

    tfp->close();
    delete tb;
    return fail;
}
