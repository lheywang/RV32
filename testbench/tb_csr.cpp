#include "Vcsr.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>
#include <iomanip>
#include "colors.h"

// Simulation time
vluint64_t sim_time = 0;
int clkdiv;

// Toggle clock helper
void tick(Vcsr *tb, VerilatedVcdC *tfp)
{
    tb->clk = 0;
    tb->eval();
    tfp->dump(sim_time++);
    tb->clk = 1;
    tb->eval();
    tfp->dump(sim_time++);
}

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vcsr *tb = new Vcsr;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/registers.vcd");

    tb->we = 1;
    tick(tb, tfp);

    std::cout << "Starting counter simulation...\n";

    int pass = 0;
    int fail = 0;

    // Count test
    for (uint64_t k = 0; k < 65; k++)
    {
        // Write some data (and calling tick to register them)
        tb->wa = k % 32;
        tb->wd = data[k];
        tick(tb, tfp);

        // Read some data (without calling tick but only eval to register them without clock)
        tb->ra1 = k % 32;
        tb->ra2 = k % 32;
        tick(tb, tfp);

        if ((k % 32) == 0)
        {
            if ((tb->rd1 != 0) | (tb->rd2 != 0))
                fail += 1;
            else
                pass += 1;
        }
        else
        {
            if ((tb->rd1 != data[k]) | (tb->rd2 != data[k]))
                fail += 1;
            else
                pass += 1;
        }
    }

    std::cout << "Simulation complete."
              << std::endl
              << KYEL << "--------------------------------------------------------\n"
              << "Results : (Registers)"
              << "\n--------------------------------------------------------"
              << std::endl
              << KGRN << "\tPass : "
              << std::setw(4) << pass
              << KRED << "\n\tFail : "
              << std::setw(4) << fail
              << RST
              << std::endl;

    if (fail == 0)
        std::cout << KGRN
                  << "Tests passed !"
                  << RST
                  << std::endl;
    else
        std::cout << KRED
                  << "Tests failed !"
                  << RST
                  << std::endl;

    tfp->close();
    delete tb;
    return fail;
}
