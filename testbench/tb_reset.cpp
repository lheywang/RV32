#include "Vreset.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"

char *module = (char *)"Reset";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vreset *tb = new Vreset;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/reset.vcd");

    // Reset sequence
    tb->rst_in = 1;

    // Idle state
    for (uint64_t k = 0; k < 10; k++)
    {
        equality_print((char *)"Idle", k, tb->rst_out, 1);
        tick(tb, tfp);
    }

    tb->rst_in = 0;
    tick(tb, tfp);
    tb->rst_in = 1;

    // Active state
    for (uint64_t k = 0; k < 10; k++)
    {
        equality_print((char *)"Reset", 10 + k, tb->rst_out, 0);
        tick(tb, tfp);
    }

    // Idle state
    for (uint64_t k = 0; k < 10; k++)
    {
        equality_print((char *)"Idle", 20 + k, tb->rst_out, 1);
        tick(tb, tfp);
    }

    final_print(module);

    tfp->close();

    uint64_t fail, pass;
    get_counts(&pass, &fail);

    delete tb;
    return fail;
}
