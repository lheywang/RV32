#include "Vbooth.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"
#include "generated_commands.h"

char *module = (char *)"Booth-Multiplier";

unsigned int input1[10] = {10, 100, 1000, 0xFFFFFFFF, 0, 8, 2, 17, 29, 33};
unsigned int input2[10] = {3, 5, 7, 9, 22, 0xFFFFFFFF, 21, 37, 49, 11345678};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vbooth *tb = new Vbooth;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/booth.vcd");

    // Reset sequence
    stick(tb, tfp);
    tb->rst_n = 0;
    tb->clk = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);

    initial_print(module);

    int ticks = 0;

    tb->start = 1;
    tb->X_signed = 0;
    tb->Y_signed = 0;
    tb->X = input1[0];
    tb->Y = input2[0];

    // Running for a defined number of cycles
    for (int i = 0; i < 40; i++)
    {
        tick(tb, tfp);
        tb->start = 0;
        ticks += 1;
    }

    final_print(module);

    tfp->close();

    uint64_t pass, fail;
    get_counts(&pass, &fail);
    delete tb;
    return fail;
}
