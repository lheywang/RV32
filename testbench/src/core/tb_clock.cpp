#include "Vclock.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "colors.h"
#include "utils.h"

char *module = (char *)"Clocks";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vclock *tb = new Vclock;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/clock.vcd");

    // Reset sequence
    stick(tb, tfp);
    tb->rst_n = 0;
    tb->clk_en = 0;
    tb->clk = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);

    initial_print(module);

    int ticks = 0;

    // Running for a defined number of cycles
    for (int i = 0; i < 1000; i++)
    {
        tick(tb, tfp);
        ticks += 1;
        int rem = !(ticks % 2);

        if (ticks > 1)
            equality_print((char *)"Clock", ticks, tb->clk_en, rem);
    }

    final_print(module);

    tfp->close();

    uint64_t pass, fail;
    get_counts(&pass, &fail);
    delete tb;
    return (fail != 0) ? 1 : 0;
}
