#include "Vdecoder.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

struct decoded
{
    unsigned int rs1;
    unsigned int rs2;
    unsigned int rd;
    unsigned int imm;
    unsigned int opcode;
    unsigned int illegal;
};

unsigned int instructions[]{
    // Loads
    0b0111010'01010'01101'010'01111'01101'11, // LUI
    0b0111010'01010'01101'010'01111'00101'11, // AUIPC

    // Immediates
    0b1111111'11111'00011'000'10000'00100'11,  // ADDI
    0b1111111'11111'00011'010'10000'00100'11,  // SLTI
    0b1111111'11111'00011'011'10000'00100'11,  // SLTIU
    0b1111111'11111'00011'100'10000'00100'11,  // XORI
    0b1111111'11111'00011'110'10000'00100'11,  // ORI
    0b1111111'11111'00011'111'10000'00100'11,  // ANDI
    0b1111111'11111'00011'001'10000'00100'11,  // SLLI
    0b00000'01'11111'00011'101'10000'00100'11, // SRLI
    0b01000'01'11111'00011'101'10000'00100'11, // SRAI

    // Registers
    0b0000000'01111'10001'000'11111'01100'11, // ADD
    0b0100000'01111'10001'000'11111'01100'11, // SUB
    0b0000000'01111'10001'001'11111'01100'11, // SLL
    0b0000000'01111'10001'010'11111'01100'11, // SLT
    0b0000000'01111'10001'011'11111'01100'11, // SLTU
    0b0000000'01111'10001'100'11111'01100'11, // XOR
    0b0000000'01111'10001'101'11111'01100'11, // SRL
    0b0100000'01111'10001'101'11111'01100'11, // SRA
    0b0000000'01111'10001'110'11111'01100'11, // OR
    0b0000000'01111'10001'111'11111'01100'11, // AND

    // Misc
    0b0000000'00000'00000'000'00000'00011'11, // FENCE

    // Jumps
    0b0111111'00111'00110'000'11111'11000'11, // BEQ
    0b0111111'00111'00110'001'11111'11000'11, // BNE
    0b0111111'00111'00110'100'11111'11000'11, // BLT
    0b0111111'00111'00110'101'11111'11000'11, // BGE
    0b0111111'00111'00110'110'11111'11000'11, // BLTU
    0b0111111'00111'00110'111'11111'11000'11, // BGEU

    // Memory
    0b1111111'11111'00011'000'11111'01000'11, // SB
    0b1111111'11111'00011'001'11111'01000'11, // SH
    0b1111111'11111'00011'010'11111'01000'11, // SW
    0b1111111'11111'00011'000'00001'00000'11, // LB
    0b1111111'11111'00011'001'00001'00000'11, // LH
    0b1111111'11111'00011'010'00001'00000'11, // LW
    0b1111111'11111'00011'100'00001'00000'11, // LBU
    0b1111111'11111'00011'101'00001'00000'11, // LHU

    // Jumps
    0b1111111'11111'11111'111'00011'11011'11, // JAL
    0b1111111'11111'00001'000'00011'11001'11, // JALR

    // Syscalls
    0b0000000'00000'00000'000'00000'11100'11, // ECALL
    0b0000000'00001'00000'000'00000'11100'11, // EBREAK
    0b0011000'00010'00000'000'00000'11100'11, // MRET

    // RV32M
    0b0000001'01111'10001'000'11111'01100'11, // MUL
    0b0000001'01111'10001'001'11111'01100'11, // MULH
    0b0000001'01111'10001'010'11111'01100'11, // MULSHU
    0b0000001'01111'10001'011'11111'01100'11, // MULHU
    0b0000001'01111'10001'100'11111'01100'11, // DIV
    0b0000001'01111'10001'101'11111'01100'11, // DIVU
    0b0000001'01111'10001'110'11111'01100'11, // REM
    0b0000001'01111'10001'111'11111'01100'11, // REMU

    // ZICSR
    0b1111111'11111'11111'001'00001'11100'11, // CSRRW
    0b1111111'11111'11111'010'00001'11100'11, // CSRRS
    0b1111111'11111'11111'011'00001'11100'11, // CSRRC
    0b1111111'11111'11111'101'00001'11100'11, // CSRRWI
    0b1111111'11111'11111'110'00001'11100'11, // CSRRSI
    0b1111111'11111'11111'111'00001'11100'11, // CSRRCI

    // Illegals
    0b1111111'00001'00011'011'11111'01000'11, // (Illegal : SH)
    0b0111111'00111'00110'010'11111'11000'11  // (Illegal : BGE)
};

decoded dinstructions[] = {
    // Loads (0)
    {.rs1 = 0, .rs2 = 0, .rd = 15, .imm = 1957076992, .opcode = opcodes_t::i_LUI, .illegal = 0},
    {.rs1 = 0, .rs2 = 0, .rd = 15, .imm = 1957076992, .opcode = opcodes_t::i_AUIPC, .illegal = 0},

    // Immediates (2)
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_ADDI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SLTI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SLTIU, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_XORI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_ORI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_ANDI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SLLI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0x3F, .opcode = opcodes_t::i_SRLI, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 16, .imm = 0x43F, .opcode = opcodes_t::i_SRAI, .illegal = 0},

    // Registers (b)
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_ADD, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SUB, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SLL, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SLT, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SLTU, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_XOR, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SRL, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_SRA, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_OR, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_AND, .illegal = 0},

    // Misc (15)
    {.rs1 = 0, .rs2 = 0, .rd = 0, .imm = 0, .opcode = opcodes_t::i_FENCE, .illegal = 0},

    // Branches (16)
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BEQ, .illegal = 0},
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BNE, .illegal = 0},
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BLT, .illegal = 0},
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BGE, .illegal = 0},
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BLTU, .illegal = 0},
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = opcodes_t::i_BGEU, .illegal = 0},

    // Memory (1c)
    {.rs1 = 3, .rs2 = 31, .rd = 0, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SB, .illegal = 0},
    {.rs1 = 3, .rs2 = 31, .rd = 0, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SH, .illegal = 0},
    {.rs1 = 3, .rs2 = 31, .rd = 0, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_SW, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_LB, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_LH, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_LW, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_LBU, .illegal = 0},
    {.rs1 = 3, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_LHU, .illegal = 0},

    // Jumps (24)
    {.rs1 = 0, .rs2 = 0, .rd = 3, .imm = 0xFFFFFFFE, .opcode = opcodes_t::i_JAL, .illegal = 0},
    {.rs1 = 1, .rs2 = 0, .rd = 3, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_JALR, .illegal = 0},

    // Syscalls (26)
    {.rs1 = 0, .rs2 = 0, .rd = 0, .imm = 0, .opcode = opcodes_t::i_ECALL, .illegal = 0},
    {.rs1 = 0, .rs2 = 0, .rd = 0, .imm = 0, .opcode = opcodes_t::i_EBREAK, .illegal = 0},
    {.rs1 = 0, .rs2 = 0, .rd = 0, .imm = 0, .opcode = opcodes_t::i_MRET, .illegal = 0},

    // RV32M (29)
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_MUL, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_MULH, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_MULHSU, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_MULHU, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_DIV, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_DIVU, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_REM, .illegal = 0},
    {.rs1 = 17, .rs2 = 15, .rd = 31, .imm = 0, .opcode = opcodes_t::i_REMU, .illegal = 0},

    // ZICSR (31)
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRW, .illegal = 0},
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRS, .illegal = 0},
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRC, .illegal = 0},
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRWI, .illegal = 0},
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRSI, .illegal = 0},
    {.rs1 = 31, .rs2 = 0, .rd = 1, .imm = 0xFFFFFFFF, .opcode = opcodes_t::i_CSRRCI, .illegal = 0},

    // Illegals (37)
    {.rs1 = 3, .rs2 = 1, .rd = 0, .imm = 0xFFFFFFFF, .opcode = 0, .illegal = 1}, // SH Based
    {.rs1 = 6, .rs2 = 7, .rd = 0, .imm = 0xFFE, .opcode = 0, .illegal = 1}       // BGE Based
};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Vdecoder> tb("Decoder");
    tb.reset();
    tb.dut->clk_en = 1;
    tb.tick();

    // --- Test 1: Count until overflow ---
    for (int i = 0; i < (sizeof(instructions) / sizeof(unsigned)); i++)
    {
        tb.dut->instruction = instructions[i];
        tb.dut->i_address = 4 * i;

        tb.tick();
        tb.tick();

        tb.check_equality((unsigned int)tb.dut->rs1, (unsigned int)dinstructions[i].rs1, "RS1");
        tb.check_equality((unsigned int)tb.dut->rs2, (unsigned int)dinstructions[i].rs2, "RS2");
        tb.check_equality((unsigned int)tb.dut->rd, (unsigned int)dinstructions[i].rd, "RD");
        tb.check_equality((unsigned int)tb.dut->imm, (unsigned int)dinstructions[i].imm, "IMM");
        tb.check_equality((unsigned int)tb.dut->opcode, (unsigned int)dinstructions[i].opcode,
                          "OPCODE");
        tb.check_equality((unsigned int)tb.dut->illegal, (unsigned int)dinstructions[i].illegal,
                          "ILLEGAL");
    }

    return tb.get_return();
}
