#include "Valu2.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "colors.h"
#include "utils.h"
#include "generated_commands.h"

int input1[10] = {1, 10, 100, 1000, -1, -10, -100, -1000, -2000000000, 0};
int input2[10] = {2, 5, 8, 17, 22, -32, -39, 1024, 18, 0};

char *module = (char *)"ALU5";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Valu2 *tb = new Valu2;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/alu2.vcd");

    initial_print(module);

    // Reset sequence
    tb->rst_n = 0;
    stick(tb, tfp);
    tb->rst_n = 1;
    stick(tb, tfp);
    stick(tb, tfp);
    stick(tb, tfp);

    /*
     *  Since theses operations won't be taking the same time, using a single
     *  loop as before isn't "easy". Thus, we split them into different smaller
     *  loops, longer code but easier to understand.
     */

    // MUL
    tb->cmd = alu_commands_t::c_MUL;

    for (int i = 0; i < 10; i++)
    {
        for (int ii = 0; ii < 10; ii++)
        {
            tb->arg0 = input1[i];
            tb->arg1 = input2[ii];

            // Compute the results
            for (int k = 0; k < 32; k++)
            {
                tick(tb, tfp);
            }

            // Asserts for results
        }
    }

    // MULH
    tb->cmd = alu_commands_t::c_MULH;

    // MULHSU
    tb->cmd = alu_commands_t::c_MULHSU;

    // MULHU
    tb->cmd = alu_commands_t::c_MULHU;

    // DIV
    tb->cmd = alu_commands_t::c_DIV;

    // DIVU
    tb->cmd = alu_commands_t::c_DIVU;

    // REM
    tb->cmd = alu_commands_t::c_REM;

    // REMU
    tb->cmd = alu_commands_t::c_REMU;

    // SLL
    tb->cmd = alu_commands_t::c_SLL;

    // SRL
    tb->cmd = alu_commands_t::c_SRL;

    // SRA
    tb->cmd = alu_commands_t::c_SRA;

    int cycle = 0;

    final_print(module);

    tfp->close();

    uint64_t fail, pass;
    get_counts(&pass, &fail);

    delete tb;
    return (fail != 0) ? 1 : 0;
}
