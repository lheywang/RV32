#include "Valu2.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

char *module = (char *)"ALU2";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Valu2> tb("ALU2");
    tb.reset();
    /*
     *  Note : Since the major work of proving that the operation are working is done
     *  into the dedicated testbenches, we oly assert here that the signals from, and to
     *  this ALU are correct, more than performing a real computation test.
     */

    int val1 = 0xAAAAAAAA;
    int val2 = 2;

    unsigned int results[] = {0x2AAAAAAA, 0xEAAAAAAA, 0x55555554, 0x00000003,
                              0x00000003, 0x00000003, 0xD5555555, 0x55555555,
                              0x00000000, 0x00000000, 0xAAAAAAA8};

    int ticks = 0;

    for (auto op : EnumRange<alu_commands_t>(alu_commands_t::c_SRL, alu_commands_t::c_REMU))
    {
        tb.set_case_enum(op);

        // The usage of both tb.set and direct assignement work.
        tb.dut->cmd = op;
        tb.dut->arg0 = val1;
        tb.dut->arg1 = val2;
        tb.dut->i_rd = 17;

        tb.tick();

        tb.dut->cmd = 0;
        tb.dut->arg0 = 0;
        tb.dut->arg1 = 0;
        tb.dut->i_rd = 0;

        // Wait to finish
        tb.run_until(&tb.dut->valid, 1);

        tb.check_equality((unsigned int)tb.dut->valid, (unsigned int)1, "valid");
        tb.check_equality((unsigned int)tb.dut->res,
                          (unsigned int)results[op - alu_commands_t::c_SRL], "res");
        tb.check_equality((unsigned int)tb.dut->o_rd, (unsigned int)17, "o_rd");
        tb.check_equality((unsigned int)tb.dut->i_error, (unsigned int)0, "i_error");
        tb.check_equality((unsigned int)tb.dut->o_error, (unsigned int)0, "o_error");
        tb.check_equality((unsigned int)tb.dut->req, (unsigned int)0, "req");

        // Finally, clearing the output
        tb.clear();
        tb.check_equality((unsigned int)tb.dut->busy, (unsigned int)0, "busy");
        tb.increment_cycles();
    }

    return tb.get_return();
}
