#include "Valu1.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

int inputs1[5] = {10, 32, 48, 64, 1024};
int inputs2[5] = {10, -32, 48, 64, 1024};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Valu1> tb("ALU1");
    tb.reset();

    // Formal calculation test
    for (int i = 5; i < 13; i++)
    {
        tb.dut->cmd = i;
        tb.dut->addr = 0x00001FFF;
        tb.dut->imm = 0x00001FFF;

        for (int ii = 0; ii < 5; ii++)
        {
            for (int iii = 0; iii < 5; iii++)
            {

                tb.dut->arg0 = (uint32_t)inputs1[ii];
                tb.dut->arg1 = (uint32_t)inputs2[iii];
                tb.tick();
                tb.tick();

                tb.check_equality((unsigned int)tb.dut->busy, (unsigned int)1, "busy");
                tb.check_equality((unsigned int)tb.dut->valid, (unsigned int)1, "valid");

                switch (i)
                {
                case 5: // SLT
                    tb.check_equality((int32_t)tb.dut->res, ((static_cast<int32_t>(inputs1[ii]) < static_cast<int32_t>(inputs2[iii])) ? 1 : 0), "SLTU - req");
                    tb.check_equality((unsigned int)tb.dut->req, (unsigned int)0, "valid");
                    break;

                case 6: // SLTU
                    tb.check_equality((uint32_t)tb.dut->res, (static_cast<uint32_t>(inputs1[ii]) < static_cast<uint32_t>(inputs2[iii]) ? 1 : 0), "SLTU - req");
                    tb.check_equality((unsigned int)tb.dut->req, (unsigned int)0, "valid");
                    break;

                case 7: // BEQ
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BEQ - res");
                    tb.check_equality((int32_t)tb.dut->req, ((static_cast<int32_t>(inputs1[ii]) == static_cast<int32_t>(inputs2[iii])) ? 1 : 0), "BEQ - req");
                    break;

                case 8: // BNE
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BNE - res");
                    tb.check_equality((int32_t)tb.dut->req, ((static_cast<int32_t>(inputs1[ii]) == static_cast<int32_t>(inputs2[iii])) ? 0 : 1), "BNE - req");
                    break;

                case 9: // BLT
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BLT - res");
                    tb.check_equality((int32_t)tb.dut->req, ((static_cast<int32_t>(inputs1[ii]) < static_cast<int32_t>(inputs2[iii])) ? 1 : 0), "BLT - req");
                    break;
                case 10: // BGE
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BGE - res");
                    tb.check_equality((int32_t)tb.dut->req, ((static_cast<int32_t>(inputs1[ii]) >= static_cast<int32_t>(inputs2[iii])) ? 1 : 0), "BGE - req");
                    break;
                case 11: // BLTU
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BLTU - res");
                    tb.check_equality((uint32_t)tb.dut->req, (static_cast<uint32_t>(inputs1[ii]) < static_cast<uint32_t>(inputs2[iii]) ? 1 : 0), "BLTU - req");
                    break;
                case 12: // BGEU
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "BGEU - res");
                    tb.check_equality((uint32_t)tb.dut->req, (static_cast<uint32_t>(inputs1[ii]) >= static_cast<uint32_t>(inputs2[iii]) ? 1 : 0), "BGEU - req");
                    break;
                }

                tb.dut->clear = 1;

                tb.increment_cycles();
            }
        }
    }

    return tb.get_return();
}
