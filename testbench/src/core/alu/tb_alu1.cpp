#include "Valu1.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

int inputs1[5] = {10, 32, 48, 64, 1024};
int inputs2[5] = {10, -32, 48, 64, 1024};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Valu1> tb("ALU1");
    tb.reset();

    // Formal calculation test
    for (int i = alu_commands_t::c_SLT; i < (alu_commands_t::c_BGEU + 1); i++)
    {
        tb.dut->cmd = i;
        tb.dut->addr = 0x00001FFF;
        tb.dut->imm = 0x00001FFF;

        switch (i)
        {
        case alu_commands_t::c_SLT:
            tb.set_case("SLT");
            break;
        case alu_commands_t::c_SLTU:
            tb.set_case("SLTU");
            break;
        case alu_commands_t::c_BEQ:
            tb.set_case("BEQ");
            break;
        case alu_commands_t::c_BNE:
            tb.set_case("BNE");
            break;
        case alu_commands_t::c_BLT:
            tb.set_case("BLT");
            break;
        case alu_commands_t::c_BGE:
            tb.set_case("BGE");
            break;
        case alu_commands_t::c_BLTU:
            tb.set_case("BLTU");
            break;
        case alu_commands_t::c_BGEU:
            tb.set_case("BGEU");
            break;
        }

        for (int ii = 0; ii < 5; ii++)
        {
            for (int iii = 0; iii < 5; iii++)
            {

                tb.dut->arg0 = (uint32_t)inputs1[ii];
                tb.dut->arg1 = (uint32_t)inputs2[iii];
                tb.tick();
                tb.tick();

                tb.check_equality((unsigned int)tb.dut->busy, (unsigned int)1, "busy");
                tb.check_equality((unsigned int)tb.dut->valid, (unsigned int)1, "valid");

                switch (i)
                {
                case alu_commands_t::c_SLT:
                    tb.check_equality(
                        (int)tb.dut->res,
                        ((static_cast<int32_t>(inputs1[ii]) < static_cast<int32_t>(inputs2[iii]))
                             ? 1
                             : 0),
                        "res");
                    tb.check_equality((unsigned int)tb.dut->req, (unsigned int)0, "req");
                    break;

                case alu_commands_t::c_SLTU:
                    tb.check_equality(
                        (int)tb.dut->res,
                        (static_cast<uint32_t>(inputs1[ii]) < static_cast<uint32_t>(inputs2[iii])
                             ? 1
                             : 0),
                        "res");
                    tb.check_equality((unsigned int)tb.dut->req, (unsigned int)0, "req");
                    break;

                case alu_commands_t::c_BEQ:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        ((static_cast<int32_t>(inputs1[ii]) == static_cast<int32_t>(inputs2[iii]))
                             ? 1
                             : 0),
                        "res");
                    break;

                case alu_commands_t::c_BNE:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        ((static_cast<int32_t>(inputs1[ii]) == static_cast<int32_t>(inputs2[iii]))
                             ? 0
                             : 1),
                        "res");
                    break;

                case alu_commands_t::c_BLT:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        ((static_cast<int32_t>(inputs1[ii]) < static_cast<int32_t>(inputs2[iii]))
                             ? 1
                             : 0),
                        "res");
                    break;
                case alu_commands_t::c_BGE:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        ((static_cast<int32_t>(inputs1[ii]) >= static_cast<int32_t>(inputs2[iii]))
                             ? 1
                             : 0),
                        "res");
                    break;
                case alu_commands_t::c_BLTU:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        (static_cast<uint32_t>(inputs1[ii]) < static_cast<uint32_t>(inputs2[iii])
                             ? 1
                             : 0),
                        "res");
                    break;
                case alu_commands_t::c_BGEU:
                    tb.check_equality((unsigned int)tb.dut->res, (unsigned int)16382, "req");
                    tb.check_equality(
                        (int)tb.dut->req,
                        (static_cast<uint32_t>(inputs1[ii]) >= static_cast<uint32_t>(inputs2[iii])
                             ? 1
                             : 0),
                        "res");
                    break;
                }

                tb.dut->clear = 1;

                tb.increment_cycles();
            }
        }
    }

    return tb.get_return();
}
