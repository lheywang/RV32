#include "Vbooth.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

unsigned int input1[10] = {10, 100, 1000, 0xFFFFFFFF, 0, 8, 2, 17, 29, 33};
unsigned int input2[10] = {3, 5, 7, 9, 22, 0xFFFFFFFF, 21, 37, 49, 11345678};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Vbooth> tb("Booth-Multiplier");
    tb.reset();

    tb.tick();

    for (int op = 0; op < 4; op++)
    {
        switch (op)
        {
        case 0: // MULxU
            tb.dut->X_signed = 0;
            tb.dut->Y_signed = 0;
            tb.set_case("Unsigned X Unsigned");
            break;
        case 1: // (unsupported by risc V)
            tb.dut->X_signed = 0;
            tb.dut->Y_signed = 1;
            tb.set_case("Unsigned X   Signed");
            break;
        case 2: // MULxSU
            tb.dut->X_signed = 1;
            tb.dut->Y_signed = 0;
            tb.set_case("Signed X Unsigned");
            break;
        case 3: // MULx
            tb.dut->X_signed = 1;
            tb.dut->Y_signed = 1;
            tb.set_case("Signed X   Signed");
            break;
        }

        // First set of inputs
        for (int i = 0; i < 10; i++)
        {
            for (int ii = 0; ii < 10; ii++)
            {
                // Set inputs
                tb.dut->X = input1[i];
                tb.dut->Y = input2[ii];

                // Start the test
                tb.tick();
                tb.dut->start = 1;
                tb.tick();
                tb.dut->start = 0;

                int count = tb.run_until(&tb.dut->valid, 1);

                tb.check_equality((int)tb.dut->valid, (int)1, "Valid");

                uint64_t result = 0;
                switch (op)
                {
                case 0:
                    result = ((uint64_t)input1[i] * (uint64_t)input2[ii]);
                    tb.check_equality((uint32_t)((tb.dut->Z)), (uint32_t)(result),
                                      "Result (U * U)");
                    break;
                case 1:
                    result = ((uint64_t)input1[i] * (int64_t)input2[ii]);
                    tb.check_equality((uint32_t)((tb.dut->Z)), (uint32_t)(result),
                                      "Result (U * S)");
                    break;
                case 2:
                    result = ((int64_t)input1[i] * (uint64_t)input2[ii]);
                    tb.check_equality((uint32_t)((tb.dut->Z)), (uint32_t)(result),
                                      "Result (S * U)");
                    break;
                case 3:
                    result = ((int64_t)input1[i] * (int64_t)input2[ii]);
                    tb.check_equality((uint32_t)((tb.dut->Z)), (uint32_t)(result),
                                      "Result (S * S)");
                    break;
                }

                tb.tick();
                tb.check_equality((int)tb.dut->valid, 0, "Valid");
                tb.increment_cycles();
            }
        }
    }

    return tb.get_return();
}
