#include "Vshift.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "colors.h"
#include "utils.h"
#include "generated_commands.h"

char *module = (char *)"Shifter";

unsigned int input[20] = {10, 100, 1000, 0xFFFFFFFF, 0, 8, 2, 17, 29, 33, 59, 87, 453610452, 452135, 125245454, 47, 123, 789, 456, 20};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vshift *tb = new Vshift;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/shift.vcd");

    // Reset sequence
    stick(tb, tfp);
    tb->rst_n = 0;
    tb->clk = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);

    initial_print(module);

    int ticks = 0;

    for (int op = 0; op < 3; op++)
    {
        // select shift mode
        switch (op)
        {
        case 0:
            tb->shift_left = 0;
            tb->arithmetic = 0;
            print_case(module, (char *)"Right shift      ");
            break;
        case 1:
            tb->shift_left = 0;
            tb->arithmetic = 1;
            print_case(module, (char *)"Arithmetic shift ");
            break;
        case 2:
            tb->shift_left = 1;
            tb->arithmetic = 0;
            print_case(module, (char *)"Left shift       ");
            break;
            // Fourth combination is equivalent by hardware to case 2, thus, untested.
        }

        for (int i = 0; i < 20; i++)
        {
            tb->data_in = input[i];

            for (int ii = 0; ii < 32; ii++)
            {
                tb->shift_amount = ii;

                tb->start = 1;

                do
                {
                    tick(tb, tfp);
                    tb->start = 0;
                } while (tb->done != 1);

                switch (op)
                {
                case 0:
                    equality_print((char *)"Shifted : ",
                                   ticks,
                                   (unsigned)tb->data_out,
                                   (unsigned)tb->data_in >> tb->shift_amount);
                    break;
                case 1:
                    equality_print((char *)"Shifted : ",
                                   ticks,
                                   (signed)tb->data_out,
                                   (signed)tb->data_in >> tb->shift_amount);
                    break;
                case 2:
                    equality_print((char *)"Shifted : ",
                                   ticks,
                                   (unsigned)tb->data_out,
                                   (unsigned)tb->data_in << tb->shift_amount);
                    break;
                }

                ticks += 1;
            }
        }
    }

    final_print(module);

    tfp->close();

    uint64_t pass, fail;
    get_counts(&pass, &fail);
    delete tb;
    return (fail != 0) ? 1 : 0;
}
