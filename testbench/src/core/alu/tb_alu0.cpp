#include "Valu0.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

unsigned int inputs1[5] = {10, 32, 48, 64, 1024};
unsigned int inputs2[5] = {0x7FFFF000, 4096, 0xAAAAAAAA, 0x55555555, 0};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Valu0> tb("ALU0");
    tb.reset();

    int cycle = 0;

    // Formal calculation test
    for (int i = 0; i < 5; i++)
    {
        tb.dut->cmd = i;
        tb.dut->i_rd = 0x1F;

        for (int ii = 0; ii < 5; ii++)
        {
            for (int iii = 0; iii < 5; iii++)
            {
                tb.dut->arg0 = inputs1[ii];
                tb.dut->arg1 = inputs2[iii];
                tb.tick();
                tb.tick();

                tb.check_equality(&tb.dut->busy, 1, "Busy");
                tb.check_equality(&tb.dut->valid, 1, "Busy");
                tb.check_equality(&tb.dut->o_rd, 0x1F, "Busy");

                switch (i)
                {
                case 0: // ADD
                    tb.check_equality(&tb.dut->res, (inputs1[ii] + inputs2[iii]), "Add");
                    break;

                case 1: // SUB
                    tb.check_equality(&tb.dut->res, (inputs1[ii] - inputs2[iii]), "Sub");
                    break;

                case 2: // AND
                    tb.check_equality(&tb.dut->res, (inputs1[ii] & inputs2[iii]), "And");
                    break;

                case 3: // OR
                    tb.check_equality(&tb.dut->res, (inputs1[ii] | inputs2[iii]), "Or");
                    break;

                case 4: // XOR
                    tb.check_equality(&tb.dut->res, (inputs1[ii] ^ inputs2[iii]), "Xor");
                    break;
                }

                tb.dut->clear = 1;
                tb.increment_cycles();
            }
        }
    }

    // Overflow test
    tb.dut->cmd = 0;
    tb.dut->i_rd = 0x1F;
    tb.dut->arg0 = 0xFFFFFFFF;
    tb.dut->arg1 = 0xFFFFFFFF;

    tb.tick();
    tb.tick();

    tb.check_equality(&tb.dut->o_error, 1, "Overflow");

    return tb.get_return();
}
