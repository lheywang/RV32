#include "Vregisters.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

unsigned int data[65] =
    {
        0x7486cfbf, 0x0c7cf02a, 0x8cd82726, 0x40d34f74, 0x21f9c7fc,
        0xe032de55, 0x02d7c551, 0x58c26e6f, 0x748cfb32, 0x479ea70e,
        0x14a86d72, 0x3e2659b1, 0x5f3bae74, 0xd8ef4aac, 0x194c72f4,
        0xdc923bfc, 0x32e5eb28, 0xe8e9f409, 0xcddf0231, 0x1f4203e3,
        0xe8499bf1, 0xdf3acb7d, 0xcd612544, 0x1f4203e3, 0x1f4203e3,
        0x27e12cb8, 0x69f02b54, 0x91a2fdcf, 0x26762337, 0x81f61818,
        0x3cc1c1da, 0x3a7f48e4, 0x6b87519c, 0x5c269f39, 0x04cf5c3a,
        0xdb48c4f6, 0xff24a911, 0x7cfd3631, 0x30a97d3a, 0x585abf6d,
        0x9381e24e, 0xb367cd70, 0x3d648e2c, 0x0740c224, 0xcb3aac11,
        0x9e75fada, 0xea5d73bf, 0xe027f722, 0x3332a91b, 0xf163afe4,
        0x75294122, 0x06d4cb26, 0x95f7eafd, 0xd8025370, 0x6c7ae8b9,
        0x21f9c7fc, 0x2c9c2914, 0xa1f853ab, 0x34a3a158, 0x2d8ac575,
        0xeeb9db21, 0x44df38db, 0x7900cb0d, 0x00000000 // Writen data array
};

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Vregisters> tb("Registers");

    tb.tick();
    tb.dut->we = 1;
    tb.tick();

    // Count test
    for (uint64_t k = 0; k < 65; k++)
    {
        // Write some data (and calling tick to register them)
        tb.dut->wa = k % 32;
        tb.dut->wd = data[k];
        tb.tick();

        // Read some data (without calling tick but only eval to register them without clock)
        tb.dut->ra1 = k % 32;
        tb.dut->ra2 = k % 32;
        tb.tick();

        if ((k % 32) == 0)
        {
            tb.check_equality(&tb.dut->rd1, 0, "Reg 0 (RD1)");
            tb.check_equality_arg(&tb.dut->rd2, 0, "Reg 0 (RD2)");
        }
        else
        {
            tb.check_equality(&tb.dut->rd1, data[k], "Reg N (RD1)");
            tb.check_equality_arg(&tb.dut->rd2, data[k], "Reg N (RD2)");
        }
    }

    return tb.get_return();
}
