#include "Vpcounter.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Vpcounter> tb("PCounter");
    tb.reset();

    // --- Test 1: Count until overflow ---
    tb.set_case("Counting");
    tb.dut->loaded = 0x10000000;
    tb.dut->clk_en = 1;
    tb.dut->load = 0;
    tb.dut->enable = 1;
    for (int i = 0; i < 4095; i++)
    {
        tb.tick();

        tb.dut->loaded += 4;
        tb.check_equality((unsigned int)tb.dut->address, (unsigned int)tb.dut->loaded, "normal");
        tb.increment_cycles();
    }

    // --- Test 2: Overflow test ---
    tb.set_case("Overflowing");
    tb.dut->enable = 0;
    tb.dut->load = 1;
    tb.dut->load2 = 0;
    tb.dut->loaded = 0x10003FF0;
    tb.dut->loaded2 = 0x10001FFF;
    int ovf[4] = {0, 0, 0, 1};
    tb.tick();

    tb.dut->load = 0;
    tb.dut->enable = 1;
    for (int i = 0; i < 4; i++)
    {
        tb.tick();

        if (i != 3)
            tb.dut->loaded += 4;

        tb.check_equality((unsigned int)tb.dut->address, (unsigned int)tb.dut->loaded, "loading");
        tb.increment_cycles();
    }

    // --- Test 3: Main port loading ---
    tb.set_case("Loading (1)");
    tb.dut->enable = 1;
    tb.dut->load = 1;
    tb.dut->load2 = 0;
    tb.dut->loaded = 0x10003FF0;
    tb.dut->loaded2 = 0x10001FFF;
    tb.tick();

    for (int i = 0; i < 10; i++)
    {
        tb.tick();
        tb.check_equality((unsigned int)tb.dut->address, (unsigned int)tb.dut->loaded, "loading");
        tb.increment_cycles();
    }

    // --- Test 4: Aux port loading ---
    tb.set_case("Loading (2)");
    tb.dut->enable = 1;
    tb.dut->load = 0;
    tb.dut->load2 = 1;
    tb.dut->loaded = 0x10003FF0;
    tb.dut->loaded2 = 0x10001FFF;
    tb.tick();

    for (int i = 0; i < 10; i++)
    {
        tb.tick();
        tb.check_equality((unsigned int)tb.dut->address, (unsigned int)tb.dut->loaded2, "loading");
        tb.increment_cycles();
    }

    // --- Test 5 : Concurrent loading ---
    tb.set_case("Concurrent loading");
    tb.dut->enable = 1;
    tb.dut->load = 1;
    tb.dut->load2 = 1;
    tb.dut->loaded = 0x10003FF0;
    tb.dut->loaded2 = 0x10001FFF;
    tb.tick();

    for (int i = 0; i < 10; i++)
    {
        tb.tick();
        tb.check_equality((unsigned int)tb.dut->address, (unsigned int)tb.dut->loaded, "loading");
        tb.increment_cycles();
    }

    return tb.get_return();
}
