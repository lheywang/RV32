#include "Vreset.h" // Generated by Verilator
#include "verilated.h"

#include "testbench.h"

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);
    Testbench<Vreset> tb("Reset");

    // Reset sequence
    tb.dut->rst_in = 1;
    tb.tick(); // First tick not valid, but taht's fine

    // Idle state
    for (uint64_t k = 0; k < 10; k++)
    {
        tb.check_equality((int)tb.dut->rst_out, 0, "Active");
        tb.tick();
        tb.increment_cycles();
    }

    for (uint64_t k = 0; k < 10; k++)
    {
        tb.check_equality((int)tb.dut->rst_out, 1, "Idle");
        tb.tick();
        tb.increment_cycles();
    }

    tb.dut->rst_in = 0;
    tb.tick();
    tb.dut->rst_in = 1;
    tb.tick();

    // Active state
    for (uint64_t k = 0; k < 10; k++)
    {
        tb.check_equality((int)tb.dut->rst_out, 0, "Reset");
        tb.tick();
        tb.increment_cycles();
    }

    // Idle state
    for (uint64_t k = 0; k < 10; k++)
    {
        tb.check_equality((int)tb.dut->rst_out, 1, "Idle");
        tb.tick();
        tb.increment_cycles();
    }

    return tb.get_return();
}
