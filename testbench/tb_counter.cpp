#include "Vcounter.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>
#include <iomanip>
#include "colors.h"

// Simulation time
vluint64_t sim_time = 0;
int clkdiv;

// Toggle clock helper
void tick(Vcounter *tb, VerilatedVcdC *tfp)
{
    tb->clk = 0;
    tb->eval();
    tfp->dump(sim_time++);
    tb->clk = 1;
    tb->eval();
    tfp->dump(sim_time++);
}

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vcounter *tb = new Vcounter;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/counter.vcd");

    // Reset sequence
    tb->rst_n = 0;
    tb->clk_en = 1;
    tb->enable = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);
    tb->enable = 1;

    std::cout << KMAG
              << "Starting counter simulation...\n"
              << RST;

    int pass = 0;
    int fail = 0;

    // Count test
    for (uint64_t k = 0; k < 10000; k++)
    {
        if (tb->outL == k)
            pass += 1;
        else
            fail += 1;

        tick(tb, tfp);
    }

    // Disabled test
    tb->enable = 0;
    tb->rst_n = 0;
    tick(tb, tfp);
    tb->rst_n = 1;

    for (uint64_t k = 0; k < 10000; k++)
    {
        if (tb->outL == 0)
            pass += 1;
        else
            fail += 1;

        tick(tb, tfp);
    }

    std::cout << KMAG
              << "Simulation complete."
              << std::endl
              << KYEL << "--------------------------------------------------------\n"
              << "Results : (Counters)"
              << "\n--------------------------------------------------------"
              << std::endl
              << KGRN << "\tPass : "
              << std::setw(4) << pass
              << KRED << "\n\tFail : "
              << std::setw(4) << fail
              << RST
              << std::endl;

    if (fail == 0)
        std::cout << KGRN
                  << "Tests passed !"
                  << RST
                  << std::endl;
    else
        std::cout << KRED
                  << "Tests failed !"
                  << RST
                  << std::endl;

    tfp->close();
    delete tb;
    return fail;
}
