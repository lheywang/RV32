#include "Vcounter.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"

char *module = (char *)"Counter";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vcounter *tb = new Vcounter;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/counter.vcd");

    // Reset sequence
    stick(tb, tfp);
    tb->rst_n = 0;
    tb->clk_en = 1;
    tb->enable = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);
    tb->enable = 1;

    initial_print(module);

    // Count test
    for (uint64_t k = 0; k < 10000; k++)
    {
        equality_print((char *)"Count", k, tb->outL, k);
        tick(tb, tfp);
    }

    // Disabled test
    tb->enable = 0;
    tb->rst_n = 0;
    tick(tb, tfp);
    tb->rst_n = 1;

    for (uint64_t k = 0; k < 10000; k++)
    {
        equality_print((char *)"Count", k, tb->outL, 0);
        tick(tb, tfp);
    }

    final_print(module);

    tfp->close();

    uint64_t fail, pass;
    get_counts(&pass, &fail);

    delete tb;
    return fail;
}
