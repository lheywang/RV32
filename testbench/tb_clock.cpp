#include "Vclock.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"

#include <iostream>
#include <iomanip>

#include "utils/colors.h"
#include "utils/utils.h"

char *module = "Clocks";

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vclock *tb = new Vclock;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/clock.vcd");

    // Reset sequence
    tb->rst_n = 0;
    tb->clk_en = 0;
    tb->clk = 0;
    tick(tb, tfp);
    tick(tb, tfp);

    tb->rst_n = 1;
    tick(tb, tfp);

    initial_print(module);

    int pass = 0;
    int fail = 0;

    int ticks = 0;

    // Running for a defined number of cycles
    for (int i = 0; i < 1000; i++)
    {
        tick(tb, tfp);
        ticks += 1;
        int rem = !(ticks % 2);

        if (ticks > 1)
        {
            if (tb->clk_en == rem)
            {
                pass += 1;
            }
            else
            {
                fail += 1;
            }
        }
    }

    final_print(pass, fail, module);

    tfp->close();
    delete tb;
    return fail;
}
