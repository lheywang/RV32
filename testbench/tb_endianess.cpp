#include "Vendianess.h" // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>
#include <iomanip>
#include "colors.h"

// Simulation time
vluint64_t sim_time = 0;

// Toggle clock helper
void tick(Vendianess *tb, VerilatedVcdC *tfp)
{
    tb->eval();
    tfp->dump(sim_time++);
    tb->eval();
    tfp->dump(sim_time++);
}

// Main
int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);

    // Instantiate model
    Vendianess *tb = new Vendianess;

    // Setup waveform tracing
    Verilated::traceEverOn(true);
    VerilatedVcdC *tfp = new VerilatedVcdC;
    tb->trace(tfp, 99);
    tfp->open("simout/endianess.vcd");

    // Reset sequence
    unsigned int to_rev[8] = {
        0xdeadbeef,
        0xaabbccdd,
        0xeeff1122,
        0x33445566,
        0x778899aa,
        0xcafecafe,
        0xa5a5a5a5,
        0xaaaabbbb};
    unsigned int reversed[8] = {
        0xefbeadde,
        0xddccbbaa,
        0x2211ffee,
        0x66554433,
        0xaa998877,
        0xfecafeca,
        0xa5a5a5a5,
        0xbbbbaaaa};

    std::cout
        << "Starting clock simulation...\n";

    int pass = 0;
    int fail = 0;

    for (int k = 0; k < 8; k++)
    {
        tb->in = to_rev[k];
        tick(tb, tfp);

        if (tb->out == reversed[k])
        {
            pass += 1;
        }
        else
        {
            pass += 1;
        }
    }

    std::cout << "Simulation complete."
              << std::endl
              << KYEL << "--------------------------------------------------------\n"
              << "Results : (Endianess)"
              << "\n--------------------------------------------------------"
              << std::endl
              << KGRN << "\tPass : "
              << std::setw(4) << pass
              << KRED << "\n\tFail : "
              << std::setw(4) << fail
              << RST
              << std::endl;

    if (fail == 0)
        std::cout << KGRN
                  << "Tests passed !"
                  << RST
                  << std::endl;
    else
        std::cout << KRED
                  << "Tests failed !"
                  << RST
                  << std::endl;

    tfp->close();
    delete tb;
    return 0;
}
